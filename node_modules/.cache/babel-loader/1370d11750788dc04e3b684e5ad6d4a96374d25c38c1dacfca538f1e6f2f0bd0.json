{"ast":null,"code":"var _jsxFileName = \"C:\\\\SE\\\\ApodViewer\\\\backend\\\\apod-viewer-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport ApodList from './components/ApodList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log(process.env.REACT_APP_NASA_API_KEY);\nfunction App() {\n  _s();\n  const [apodEntries, setApodEntries] = useState([]);\n\n  // Implement your API requests and search functionality here\n  const handleSearch = async searchTerm => {\n    try {\n      const response = await fetch(`https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_NASA_API_KEY}&date=${searchTerm}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        throw new Error('Response is not JSON');\n      }\n      const data = await response.json();\n      setApodEntries([data]);\n    } catch (error) {\n      console.error('Error:', error.message);\n      // Handle errors here (e.g., show an error message to the user)\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ApodList, {\n      apodEntries: apodEntries\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ViERl3kzcPu+tL4EFjoK9X3jjhg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","SearchBar","ApodList","jsxDEV","_jsxDEV","console","log","process","env","REACT_APP_NASA_API_KEY","App","_s","apodEntries","setApodEntries","handleSearch","searchTerm","response","fetch","ok","Error","contentType","headers","get","includes","data","json","error","message","className","children","onSearch","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/SE/ApodViewer/backend/apod-viewer-frontend/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport ApodList from './components/ApodList';\n\nconsole.log(process.env.REACT_APP_NASA_API_KEY);\n\nfunction App() {\n  const [apodEntries, setApodEntries] = useState([]);\n\n  // Implement your API requests and search functionality here\n  const handleSearch = async (searchTerm) => {\n    try {\n      const response = await fetch(\n        `https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_NASA_API_KEY}&date=${searchTerm}`\n      );\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        throw new Error('Response is not JSON');\n      }\n  \n      const data = await response.json();\n      setApodEntries([data]);\n    } catch (error) {\n      console.error('Error:', error.message);\n      // Handle errors here (e.g., show an error message to the user)\n    }\n  };\n  \n\n  \n\n  return (\n    <div className=\"App\">\n      <SearchBar onSearch={handleSearch} />\n      <ApodList apodEntries={apodEntries} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAClB,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,QAAQ,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7CC,OAAO,CAACC,GAAG,CAACC,OAAO,CAACC,GAAG,CAACC,sBAAsB,CAAC;AAE/C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACA,MAAMc,YAAY,GAAG,MAAOC,UAAU,IAAK;IACzC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,+CAA8CV,OAAO,CAACC,GAAG,CAACC,sBAAuB,SAAQM,UAAW,EACvG,CAAC;MAED,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,MAAMC,WAAW,GAAGJ,QAAQ,CAACK,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MACxD,IAAI,CAACF,WAAW,IAAI,CAACA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;QAC7D,MAAM,IAAIJ,KAAK,CAAC,sBAAsB,CAAC;MACzC;MAEA,MAAMK,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClCZ,cAAc,CAAC,CAACW,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdrB,OAAO,CAACqB,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAACC,OAAO,CAAC;MACtC;IACF;EACF,CAAC;;EAKD,oBACEvB,OAAA;IAAKwB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBzB,OAAA,CAACH,SAAS;MAAC6B,QAAQ,EAAEhB;IAAa;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrC9B,OAAA,CAACF,QAAQ;MAACU,WAAW,EAAEA;IAAY;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEV;AAACvB,EAAA,CApCQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAsCZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}